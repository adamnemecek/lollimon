(*
   Union-Find algorithm

   Author: Frank Pfenning

   Loosely based on
   H.Ganzinger and D.McAllester, Logical Algorithms, ICLP'02
*)

(* 
   Interface

   singleton X -o {G}      to create a new X (X must be new)
   union X Y -o {G}        to union X and Y (X and Y must exist), balances
   find X -o {found Y, G}  to find root for X, performs path compression

   print                   to show current internal data structure

   singleton and union can be asserted in parallel,
   find must be asserted after singleton and union have saturated
*)

singleton : T -> o.
union : T -> T -> o.
find : T -> o.
found : T -> o.

(*
   Internal data structure

   parent X Y   --  X points to parent Y, linear
   size X S     --  X is root for set of size S, linear

   For each X, there is exactly one of size X S or parent X Y.

   During processing of find X, there will also be an assumption
   compress Y for any Y on the path from X to the root.

   This has one more rule than Ganzinger & McAllester but
   performs path compression.  For union of same-sized equivalence
   classes we choose non-deterministically rather than giving
   a preference to one argument over the other.

   In this version we do path compression only during find,
   not during union.
*)

parent : T -> T -> o.
size : T -> int -> o.
compress : T -> o.

singleton X
-o {size X 1}.

union X X
-o {one}.

union X Y,
parent X X'
-o {union X' Y,
    parent X X'}.

union X Y,
parent Y Y'
-o {union X Y',
    parent Y Y'}.

union X Y,
size X S1,
size Y S2,
(S2 > S1; S2 = S1),
S is S1+S2
-o {parent X Y,
    size Y S}.

union X Y,
size X S1,
size Y S2,
(S1 > S2; S1 = S2),
S is S1+S2
-o {parent Y X,
    size X S}.

(* lazy path compression during find *)
(* point all nodes on path directly to root *)
find X,
size X S
-o {found X,
    size X S}.

find X,
parent X Y
-o {find Y,
    parent X Y,			(* could remove parent pointer temporarily *)
    compress X}.

compress X,
parent X Y,
found Z
-o {parent X Z,			(* potentially compress *)
    found Z}.

(* eager path compression alternative, less efficient *)
(*
parent X Y,
parent Y Z
-o {parent X Z,
    parent Y Z}.

find X,
size X S1
-o {found X,
    size X S1}.

find X,
parent X Y
-o {found Y,
    parent X Y}.
*)

(* Examining the internal state *)
(* because of spurious non-determinism this will have multiple solutions *)
print : o.
print o- size X K, write (size X K), nl, print.
print o- parent X Y, write (parent X Y), nl, print.
print.

(* Parallel Examples *)
(*
singleton 1 -o {print}.
singleton 1 -o singleton 2 -o {print}.

singleton 1 -o singleton 2 -o singleton 3 -o union 1 3 -o singleton 4 -o
union 2 4 -o singleton 5 -o union 3 5 -o singleton 6 -o union 6 2 -o
singleton 7 -o union 1 7 -o {print}.
*)

(* Sequential Examples *)
(*
singleton 1 -o {singleton 2 -o {singleton 3 -o {union 1 3 -o
{find 1 -o {found X1, (singleton 4 -o {union 2 4 -o
{singleton 5 -o {union 3 5 -o {find 5 -o {found X5, (singleton 6 -o
{union 6 2 -o {singleton 7 -o {union 1 7 -o
{find 4 -o {found X4, print}}}}})}}}}})}}}}}.

(* first query has some non-deterministic root *)
singleton 1 -o singleton 2 -o singleton 3 -o singleton 4 -o
{union 3 4 -o union 3 2 -o union 2 1 -o {print}}.

(* next query forces 3 or 4 to be root *)
singleton 1 -o singleton 2 -o singleton 3 -o singleton 4 -o
{union 3 4 -o {union 3 2 -o {union 2 1 -o {print}}}}.
*)
