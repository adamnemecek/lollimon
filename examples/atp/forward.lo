(*
  Theorem prover for first-order logic. Uses backward and forward
chaining and is similar to LolliMon's proof search strategy.

  Author: Jeff Polakow
*)

trm : type.
atm : type.
frm : type.
^ : atm -> frm.
true : frm.
false : frm.
and : frm -> frm -> frm.
or : frm -> frm -> frm.
imp : frm -> frm -> frm.
all : (trm -> frm) -> frm.
some : (trm -> frm) -> frm.


hyp : frm -> o.

hyp false => {! zero}.
hyp (and A B) => {!( hyp A & hyp B )}.
hyp (or A B) => {!( hyp A ; hyp B )}.
hyp A => hyp (imp A B) => {! hyp B}.
hyp (all A) => {! pi x \ hyp (A x)}.
hyp (some A) => {! sigma x \ hyp (A x)}.


prove : frm -> o.

prove (and A B) <= prove A & prove B.
prove (or A B) <= {prove A ; prove B}.
prove (imp A B) <= hyp A => prove B.
prove (all A) <= pi x \ prove (A x).
prove (some A) <= {sigma x \ prove (A x)}.
prove true.
prove (^ A) <= {hyp (^ A)}.


(*** Examples ***)

p : trm -> atm. 
q : trm -> atm.
a : atm. 
b : atm.
i : trm. 
j : trm.

#query 1 2 1 
prove (imp (^ a) (^ a)).

#query 1 2 1
prove (imp (and (^ a) (imp (^ a) false)) (^ (p i))).

#query 1 2 1
prove (imp (^ a) (or (^ (p i)) (^ a))).

#query 0 1 1
prove (imp (and (^ a) (imp (^ a) (^ a))) (^ b)).

#query 1 2 1
prove (imp (all x \ imp (^ (p x)) (^(q x))) (imp (^(p i)) (some y \ ^(q y)))).

#query 1 2 1 
prove (imp (all x \ imp (^ (p x)) (^(q x))) (some y \ imp (^(p y)) (^(q y)))).











