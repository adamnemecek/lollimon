(* Bidirectional typechecking *)
(* Rob Simmons *)

atom : type.

ty : type.
arrow : ty -> ty -> ty.
atp : atom -> ty.


ctm : type.  (* Synthesizing canonical terms R *)
ntm : type.  (* Checked normal terms N         *)

var : ntm -> ctm.          (* R ::= x        *)
atm : atom -> ctm.         (*     | c        *)
app : ctm -> ntm -> ctm.   (*     | R N      *)

can : ctm -> ntm.          (* N ::= R        *)
lam : (ctm -> ntm) -> ntm. (*     | \x.N     *)

synth : ctm -> ty -> o.
check : ntm -> ty -> o.
subtmN : ntm -> o.
subtmR : ctm -> o.


(* SUBTERMS *)
subtmR (app R N) => {!subtmR R, !subtmN N}.
subtmN (can R) => {!subtmR R}.
subtmN (lam E) => {!subtmN (E (var (lam E)))}.


(* SYNTHESIZING - FORWARD CHAINING *)

{!synth (app R N) T2}
   <= synth R (arrow T1 T2) 
   <= subtmR (app R N) 
   <= check N T1.             (* THIS RULE CAUSES NON-TERMINATION (?) *)

(* CHECKING - BACKWARD CHAINING *)
check (can R) T
   <= synth R T.

check (lam E) (arrow T1 T2)
   <= (synth (var (lam E)) T1 => {check (E (var (lam E))) T2}).



(* Mini-ML *)
exp : atom. (* exp                                *)
z : atom.   (* ::= z             - Zero           *)
s : atom.   (*   | s (e)         - Successor      *)
i : atom.   (*   | i e e1 (n.e2) - If-zero        *)
l : atom.   (*   | l (x.e)       - Abstraction    *)
a : atom.   (*   | a e1 e2       - Application    *)
p : atom.   (*   | p e1 e2       - Pairing        *)
g : atom.   (*   | g e (x.y.e)   - Pair splitting *)

synth (atm z) (atp exp).
synth (atm s) (arrow (atp exp) (atp exp)).
synth (atm i) (arrow (atp exp) 
                (arrow (atp exp) 
                  (arrow (arrow (atp exp) (atp exp))
                    (atp exp)))).
synth (atm l) (arrow (arrow (atp exp) (atp exp)) (atp exp)).
synth (atm a) (arrow (atp exp) (arrow (atp exp) (atp exp))).
synth (atm p) (arrow (atp exp) (arrow (atp exp) (atp exp))).
synth (atm g) (arrow (atp exp) 
                (arrow (arrow (atp exp) (arrow (atp exp) (atp exp)))
                  (atp exp))).


(* Make things interesting *)
unit : atom.

synth (atm unit) (atp unit).



(* Example 1 : \x.x *)

#query 1 1 1 subtmN (lam (x \ can x)) => subtmN (E).
#query 2 4 4 subtmN (lam (x \ can x)) => {subtmN (E)}.
#query 1 4 4 subtmN (lam (x \ can x)) => {subtmR (E)}.
#query 1 4 4 subtmN (lam (x \ can x)) =>
  {check (lam (x \ can x)) 
         (arrow (atp exp) (atp exp))}.
#query 1 4 4 subtmN (lam (x \ can x)) =>
  {check (lam (x \ can x)) 
         (arrow (arrow (atp exp) (atp exp)) (arrow (atp exp) (atp exp)))}.
#query 0 4 4 subtmN (lam (x \ can x)) =>
  {check (lam (x \ can x)) (arrow (atp exp) (arrow (atp exp) (atp exp)))}.


(* Example 2 : \x.\y.s(x) *)

#query 4 9 9 subtmN (lam (x \ lam (y \ can (app (atm s) (can x)))))
              => {subtmN (E)}.
#query 3 9 9 subtmN (lam (x \ lam (y \ can (app (atm s) (can x)))))
              => {subtmR (E)}.
#query 1 9 9 subtmN (lam (x \ lam (y \ can (app (atm s) (can x))))) =>
  {check (lam (x \ lam (y \ can (app (atm s) (can x)))))
         (arrow (atp exp) (arrow (atp exp) (atp exp)))}.
#query 1 9 9 subtmN (lam (x \ lam (y \ can (app (atm s) (can x))))) =>
  {check (lam (x \ lam (y \ can (app (atm s) (can x)))))
         (arrow (atp exp) (arrow (atp unit) (atp exp)))}.
#query 0 9 9 subtmN (lam (x \ lam (y \ can (app (atm s) (can x))))) =>
  {check (lam (x \ lam (y \ can (app (atm s) (can x)))))
         (arrow (atp unit) (arrow (atp exp) (atp exp)))}.


(* Example 3 : \x.\y.y(x) *)

#query 4 9 9 subtmN (lam (x \ lam (y \ can (app y (can x)))))
              => {subtmN (E)}.
#query 3 9 9 subtmN (lam (x \ lam (y \ can (app y (can x)))))
              => {subtmR (E)}.
#query 1 9 9 subtmN (lam (x \ lam (y \ can (app y (can x))))) =>
  {check (lam (x \ lam (y \ can (app y (can x)))))
         (arrow (atp exp) (arrow (arrow (atp exp) (atp exp)) (atp exp)))}.
#query 0 9 9 subtmN (lam (x \ lam (y \ can (app y (can x))))) =>
  {check (lam (x \ lam (y \ can (app y (can x)))))
         (arrow (atp exp) (arrow (atp exp) (atp exp)))}.
#query 1 9 9 subtmN (lam (x \ lam (y \ can (app y (can x))))) =>
  {check (lam (x \ lam (y \ can (app y (can x)))))
         (arrow (atp exp) (arrow (arrow (atp exp) (atp unit)) (atp unit)))}.
#query 0 9 9 subtmN (lam (x \ lam (y \ can (app y (can x))))) =>
  {check (lam (x \ lam (y \ can (app y (can x)))))
         (arrow (atp exp) (arrow (arrow (atp exp) (atp exp)) (atp unit)))}.

